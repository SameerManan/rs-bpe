name: Release

on:
  push:
    tags:
      - 'v*' # Run workflow on version tags, e.g. v1.0.0
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build:
    name: build on ${{ matrix.platform || matrix.os }} (${{ matrix.target }} - ${{ matrix.manylinux || 'auto' }})
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        target: [x86_64, aarch64]
        manylinux: [auto]
        include:
          - os: ubuntu
            platform: linux
          - os: windows
            ls: dir
            interpreter: 3.10 3.11 3.12 3.13 pypy3.10
          - os: windows
            ls: dir
            target: x86_64
            python-architecture: x64
            interpreter: 3.10 3.11 3.12 3.13
          - os: windows
            ls: dir
            target: i686
            python-architecture: x86
            interpreter: 3.10 3.11 3.12 3.13
          - os: macos
            target: aarch64
            interpreter: 3.10 3.11 3.12 3.13 pypy3.10
          - os: ubuntu
            platform: linux
            target: aarch64
          - os: ubuntu
            platform: linux
            target: armv7
            interpreter: 3.10 3.11 3.12 3.13
          # musllinux
          - os: ubuntu
            platform: linux
            target: x86_64
            manylinux: musllinux_1_1
          - os: ubuntu
            platform: linux
            target: aarch64
            manylinux: musllinux_1_1
          - os: ubuntu
            platform: linux
            target: ppc64le
            interpreter: 3.10 3.11 3.12 3.13
          - os: ubuntu
            platform: linux
            target: s390x
            interpreter: 3.10 3.11 3.12 3.13
        exclude:
          - os: windows
            target: aarch64
          # Exclude Linux i686 target due to build failures in bpe-openai
          - os: ubuntu
            target: i686

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version_tag || '' }}

      - name: Debug - Check for Cargo.lock
        shell: bash
        run: |
          pwd
          ls -la
          if [[ -f "Cargo.lock" ]]; then
            echo "Cargo.lock file exists"
            echo "File size: $(wc -c < Cargo.lock) bytes"
            echo "First few lines:"
            head -n 5 Cargo.lock
          else
            echo "Cargo.lock file does not exist"
            echo "Directory contents:"
            ls -la
          fi

      - name: Extract version from tag
        id: extract_version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            REF_NAME="${{ github.event.inputs.version_tag }}"
          else
            REF_NAME="${{ github.ref_name }}"
          fi
          VERSION=$(echo $REF_NAME | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "tag_name=${REF_NAME}" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          architecture: ${{ matrix.python-architecture || 'x64' }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tomli

      - name: Update version
        shell: bash
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Running sync_version.py with version: ${{ steps.extract_version.outputs.version }}"
          python scripts/sync_version.py --set ${{ steps.extract_version.outputs.version }} || echo "Warning: Version sync failed, but continuing anyway"

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux || 'auto' }}
          container: ${{ matrix.container }}
          args: --release --out dist --interpreter ${{ matrix.interpreter || '3.10 3.11 3.12 3.13 pypy3.9 pypy3.10' }} ${{ matrix.extra-build-args }}
          rust-toolchain: stable
          docker-options: -e CI

      - name: List wheels (${{ matrix.ls || 'ls' }})
        shell: bash
        run: ${{ matrix.ls || 'ls' }} -la dist/

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform || matrix.os }}-${{ matrix.target }}-${{ matrix.manylinux || 'auto' }}
          path: dist/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version_tag || '' }}
      
      - name: Debug - Check for Cargo.lock in sdist job
        shell: bash
        run: |
          pwd
          ls -la
          if [[ -f "Cargo.lock" ]]; then
            echo "Cargo.lock file exists in sdist job"
            echo "File size: $(wc -c < Cargo.lock) bytes"
            echo "First few lines:"
            head -n 5 Cargo.lock
          else
            echo "Cargo.lock file does not exist in sdist job"
            echo "Directory contents:"
            ls -la
          fi
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          
      - name: Extract version from tag
        id: extract_version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            REF_NAME="${{ github.event.inputs.version_tag }}"
          else
            REF_NAME="${{ github.ref_name }}"
          fi
          VERSION=$(echo $REF_NAME | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "tag_name=${REF_NAME}" >> $GITHUB_OUTPUT
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tomli
          
      - name: Update version
        shell: bash
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Running sync_version.py with version: ${{ steps.extract_version.outputs.version }}"
          python scripts/sync_version.py --set ${{ steps.extract_version.outputs.version }} || echo "Warning: Version sync failed, but continuing anyway"
          
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      
      - name: List sdist
        shell: bash
        run: ls -la dist/
          
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish-pypi:
    name: Publish to PyPI
    needs: [build, build-sdist]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
          
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
          
      - name: List files to be published
        run: |
          ls -la dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist/

  publish-github:
    name: Create GitHub Release
    needs: publish-pypi
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version_tag || '' }}
      
      - name: Extract version and changelog
        id: extract_info
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            REF_NAME="${{ github.event.inputs.version_tag }}"
          else
            REF_NAME="${{ github.ref_name }}"
          fi
          
          VERSION=$(echo $REF_NAME | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          CHANGELOG="See the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details."
          
          if [ -f "CHANGELOG.md" ]; then
            SECTION=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d')
            if [ ! -z "$SECTION" ]; then
              CHANGELOG="$SECTION"
            fi
          fi
          
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "tag_name=${REF_NAME}" >> $GITHUB_OUTPUT
      
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: artifacts
          merge-multiple: true
          
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: "rs_bpe ${{ steps.extract_info.outputs.version }}"
          body: "${{ steps.extract_info.outputs.changelog }}"
          files: artifacts/*
          fail_on_unmatched_files: true
          generate_release_notes: true
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version_tag || github.ref_name }} 